{"version":3,"file":"waitAction.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/actions/waitAction.ts"],"names":[],"mappings":";;;AACA,4DAAsD;AAGtD;;;;;;;;;;;;KAYK;AACL,SAAgB,UAAU,CAAU,MAAuB,EAAE,QAAmB;IAC9E,MAAM,OAAO,GAAG,kCAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAE3C,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC;IACnB,OAAO,OAAO,CAAC;AACjB,CAAC;AALD,gCAKC","sourcesContent":["import type { Dispatch } from 'redux';\nimport { actionPromises } from '../actionPromises.js';\nimport type { Action } from '../types/index.js';\n\n/**\n * it creates promise, that will be resolved, after action is processed by the middleware. If `dispatch` function is passed it will be called with passed action *\n * @example\n * const dispatch = useDispatch();\n *\n * // detailed using\n * const action = MyController.fetchUsers();\n * dispatch(action);\n * await waitAction(action);\n *\n * // same as above, short syntax\n * await waitAction(MyController.fetchUsers(), dispatch);\n * */\nexport function waitAction<Payload>(action: Action<Payload>, dispatch?: Dispatch) {\n  const promise = actionPromises.add(action);\n\n  dispatch?.(action);\n  return promise;\n}\n"]}