{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../redux-controller-middleware/src/constants.ts"],"names":[],"mappings":";;;AAmBa,QAAA,qBAAqB,GAAG,IAAI,GAAG,EAGzC,CAAC;AAEJ,mGAAmG;AACtF,QAAA,uBAAuB,GAAG,EAAc,CAAC","sourcesContent":["import { Dispatch, MiddlewareAPI } from 'redux';\nimport type { Container } from 'cheap-di';\nimport { Action, Constructor } from './types/index.js';\n\nexport type ControllerMethodMap = Map<\n  Constructor, // controller ref\n  string // method name\n>;\n\nexport type ActionReducerParameters<Payload, State = unknown> = MiddlewareAPI<Dispatch, State> & {\n  action: Action<Payload>;\n  container: Pick<Container, 'resolve'> | undefined;\n};\nexport type ActionReducer<Payload, State> = (parameters: ActionReducerParameters<Payload, State>) => any;\n\nexport type ActionReducerOrControllerMethod<Payload = undefined, State = unknown> =\n  | ControllerMethodMap\n  | ActionReducer<Payload, State>;\n\nexport const actionToControllerMap = new Map<\n  string, // action type\n  ActionReducerOrControllerMethod<any, any>\n>();\n\n// todo: use context.metadata for passing method names from method-decorator, when it will be ready\nexport const methodNamesTemporaryBox = [] as string[];\n"]}