{"version":3,"file":"storeSlice.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/decorators/storeSlice.ts"],"names":[],"mappings":";;;AACA,8EAAwE;AAExE,2DAAqD;AAuBxC,QAAA,UAAU,GAAwB,CAAC,CAC9C,WAAkC,EAClC,EAAE;IACF,MAAM,kBAAkB,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAEjG,MAAM,mBAAmB,GAAG,WAAqE,CAAC;IAElG,MAAM,aAAa,GAAG,IAAI,WAAW,EAAE,CAAC;IACxC,iGAAiG;IACjG,MAAM,kBAAkB,GAAG,EAAE,GAAG,aAAa,EAAE,CAAC;IAEhD,mBAAmB,CAAC,MAAM,GAAG,IAAA,kCAAc,EAAC;QAC1C,cAAc,EAAE,kBAAkB;QAClC,UAAU,EAAE,aAAa;KAC1B,CAAC,CAAC;IACH,mBAAmB,CAAC,OAAO,GAAG,IAAA,oDAAuB,EAAC,kBAAkB,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAEtG,OAAO,mBAAmB,CAAC;AAC7B,CAAC,CAAwB,CAAC;AAE1B,SAAgB,qBAAqB,CAInC,qBAA4C;IAE5C,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,qBAAqB,KAAK,UAAU,EAAE,CAAC;QAChD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,CACL,CAAC,QAA+E,CAAC,IAAI,qBAAqB;QAC1G,CAAC,SAAgF,CAAC,IAAI,qBAAqB,CAC5G,CAAC;AACJ,CAAC;AAjBD,sDAiBC;AAED;;;;;;;;;;;;;;KAcK;AACL,SAAgB,6BAA6B,CAC3C,qBAA4C;IAE5C,OAAO,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC9F,CAAC;AAJD,sEAIC","sourcesContent":["import type { Reducer } from 'redux';\nimport { createStoreSliceReducer } from '../createStoreSliceReducer.js';\nimport type { Action, Constructor } from '../types/index.js';\nimport { makeActionType } from './makeActionType.js';\n\nexport type DecoratedStoreSlice<\n  StoreSlice,\n  StoreSliceConstructor extends Constructor<StoreSlice> = Constructor<StoreSlice>,\n> = StoreSliceConstructor & {\n  update: string;\n  reducer: Reducer<StoreSlice, Action<Partial<StoreSlice>>>;\n};\n\nexport interface StoreSliceDecorator {\n  // stage 3 decorator\n  <StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n    constructor: StoreSliceConstructor,\n    context: ClassDecoratorContext\n  ): StoreSliceConstructor;\n\n  // stage 2 decorator\n  <StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n    constructor: StoreSliceConstructor\n  ): StoreSliceConstructor;\n}\n\nexport const storeSlice: StoreSliceDecorator = (<StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n  constructor: StoreSliceConstructor\n) => {\n  const sanitizedClassName = constructor.name.replaceAll('StoreSlice', '').replaceAll('Store', '');\n\n  const decoratedStoreSlice = constructor as DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>;\n\n  const initialValues = new constructor();\n  // redux checks value prototypes, if direct prototype is no Object, it writes warning in console,\n  const plainInitialValues = { ...initialValues };\n\n  decoratedStoreSlice.update = makeActionType({\n    controllerName: sanitizedClassName,\n    methodName: 'updateStore',\n  });\n  decoratedStoreSlice.reducer = createStoreSliceReducer(plainInitialValues, decoratedStoreSlice.update);\n\n  return decoratedStoreSlice;\n}) as StoreSliceDecorator;\n\nexport function isDecoratedStoreSlice<\n  StoreSlice,\n  StoreSliceConstructor extends Constructor<StoreSlice> = Constructor<StoreSlice>,\n>(\n  storeSliceConstructor: StoreSliceConstructor\n): storeSliceConstructor is DecoratedStoreSlice<StoreSlice, StoreSliceConstructor> {\n  if (!storeSliceConstructor) {\n    return false;\n  }\n  if (typeof storeSliceConstructor !== 'function') {\n    return false;\n  }\n\n  return (\n    ('update' satisfies keyof DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>) in storeSliceConstructor &&\n    ('reducer' satisfies keyof DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>) in storeSliceConstructor\n  );\n}\n\n/**\n * returns action type of store slice updating action, if passed slice is decorated with @storeSlice\n * @example\n * import { getStoreSliceUpdateActionType, storeSlice, updateStoreSlice } from 'redux-controller-middleware';\n *\n * \\@storeSlice\n * class MySlice {\n *   ...\n * }\n *\n * const updateAction = updateStoreSlice(MySlice);\n * const updateActionType = getStoreSliceUpdateActionType(MySlice);\n *\n * updateActionType === updateAction.type // true\n * */\nexport function getStoreSliceUpdateActionType<StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n  storeSliceConstructor: StoreSliceConstructor\n) {\n  return (isDecoratedStoreSlice(storeSliceConstructor) && storeSliceConstructor.update) || '';\n}\n"]}