{"version":3,"file":"callActionReducer.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/decorators/callActionReducer.ts"],"names":[],"mappings":";;;AAGA,mGAA6F;AAUtF,KAAK,UAAU,iBAAiB,CAAuC,UAAsC;IAClH,MAAM;IACJ,EAAE;IACF,MAAM,EACN,aAAa,EACb,aAAa,GACd,GAAG,UAAU,CAAC;IAEf,MAAM,SAAS,GAAG,IAAA,8DAA4B,EAAC,MAAM,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;IAE7E,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE,CAAC;QACxC,IAAI,CAAC;YACH,MAAM,aAAa,CAAC;gBAClB,GAAG,aAAa;gBAChB,MAAM;gBACN,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;QAChE,CAAC;QACD,OAAO;IACT,CAAC;IAED,IAAI,KAAK,EAAE,MAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,IAAI,aAAa,EAAE,CAAC;QACtE,IAAI,UAA4D,CAAC;QACjE,IAAI,SAAS,EAAE,CAAC;YACd,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACxD,CAAC;aAAM,CAAC;YACN,UAAU,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC;YAClC,IAAI,CAAC;gBACH,MAAM,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACzC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAxCD,8CAwCC","sourcesContent":["import { DependencyResolver } from 'cheap-di';\nimport { MiddlewareAPI } from 'redux';\nimport { ActionReducerOrControllerMethod } from '../constants.js';\nimport { tryToFindDependencyContainer } from '../controller/tryToFindDependencyContainer.js';\nimport { Action } from '../types/index.js';\n\ntype Parameters<Payload = undefined, State = unknown> = {\n  action: Action<Payload>;\n  container?: DependencyResolver | (() => DependencyResolver);\n  actionReducer: ActionReducerOrControllerMethod<Payload, State>;\n  middlewareAPI: MiddlewareAPI;\n};\n\nexport async function callActionReducer<Payload = undefined, State = unknown>(parameters: Parameters<Payload, State>) {\n  const {\n    //\n    action,\n    actionReducer,\n    middlewareAPI,\n  } = parameters;\n\n  const container = tryToFindDependencyContainer(action, parameters.container);\n\n  if (typeof actionReducer === 'function') {\n    try {\n      await actionReducer({\n        ...middlewareAPI,\n        action,\n        container,\n      });\n    } catch (error) {\n      console.error('Unhandled exception in action reducer', error);\n    }\n    return;\n  }\n\n  for await (const [controllerConstructor, methodName] of actionReducer) {\n    let controller: Record<string, (action: Action<unknown>) => any>;\n    if (container) {\n      controller = container.resolve(controllerConstructor);\n    } else {\n      controller = new controllerConstructor(middlewareAPI);\n    }\n\n    const reducer = controller[methodName];\n    if (typeof reducer === 'function') {\n      try {\n        await reducer.call(controller, action);\n      } catch (error) {\n        console.error('Unhandled exception in controller', error);\n      }\n    }\n  }\n}\n"]}