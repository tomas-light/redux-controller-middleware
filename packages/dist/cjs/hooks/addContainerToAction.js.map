{"version":3,"file":"addContainerToAction.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/hooks/addContainerToAction.ts"],"names":[],"mappings":";;;AAEA,kDAA8D;AAE9D,SAAS,oBAAoB,CAAC,MAAmB,EAAE,SAAwB;IACzE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,IAAI,MAAM,YAAY,oBAAS,EAAE,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QACvC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,SAAS,GAAG,IAAA,uBAAY,EAA0B,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAEzE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;QAClD,IAAI,GAAG,KAAK,CAAC,MAAoC,CAAC,EAAE,CAAC;YACnD,SAAS,CAAC,OAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC;IACH,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAEQ,oDAAoB","sourcesContent":["import type { DiContextType } from 'cheap-di-react';\nimport type { Action as ReduxAction } from 'redux';\nimport { AppAction, createAction } from '../actions/index.js';\n\nfunction addContainerToAction(action: ReduxAction, diContext: DiContextType) {\n  if (!diContext.container) {\n    return action;\n  }\n\n  if (action instanceof AppAction) {\n    action.container = diContext.container;\n    return action;\n  }\n\n  const newAction = createAction<Record<string, unknown>>(action.type, {});\n\n  for (const [key, value] of Object.entries(action)) {\n    if (key !== ('type' satisfies keyof typeof action)) {\n      newAction.payload![key] = value;\n    }\n  }\n\n  return newAction;\n}\n\nexport { addContainerToAction };\n"]}