{"version":3,"file":"Action.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/types/Action.ts"],"names":[],"mappings":";;;AAcA,SAAgB,QAAQ,CAAC,MAAW;IAClC,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;QACjD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,UAAU,GAAwB;QACtC,EAAE;QACF,MAAM;QACN,SAAS;QACT,SAAS;QACT,iBAAiB;KAClB,CAAC;IAEF,MAAM,gBAAgB,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC;IAClE,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAfD,4BAeC","sourcesContent":["import type { UnknownAction } from 'redux';\n\nexport type ActionFactory = () => Action<unknown> | void | Promise<void>;\n\nexport interface Action<Payload = undefined> extends UnknownAction {\n  payload: Payload;\n\n  /** next actions chain (actions that will be dispatched after handling of this one) */\n  readonly actions: (ActionFactory | Action<unknown>)[];\n\n  /** is action chain stopped or not */\n  readonly stopPropagation: boolean;\n}\n\nexport function isAction(action: any): action is Action {\n  if (typeof action !== 'object' || action == null) {\n    return false;\n  }\n\n  const actionKeys: Array<keyof Action> = [\n    //\n    'type',\n    'actions',\n    'payload',\n    'stopPropagation',\n  ];\n\n  const allKeysPresented = actionKeys.every((key) => key in action);\n  return allKeysPresented;\n}\n"]}