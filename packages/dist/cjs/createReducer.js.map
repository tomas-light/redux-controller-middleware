{"version":3,"file":"createReducer.js","sourceRoot":"","sources":["../../redux-controller-middleware/src/createReducer.ts"],"names":[],"mappings":";;;AAAA,iDAAkD;AAClD,iDAAuD;AACvD,mEAA6D;AAK7D,SAAgB,aAAa,CAC3B,UAAkB,EAClB,OAAqE;IAErE,MAAM,UAAU,GAAG,IAAA,kCAAc,EAAC;QAChC,UAAU,EAAE,UAAU;QACtB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;KAC5C,CAAC,CAAC;IAEH,oCAAqB,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAE/C,OAAO,CAAC,CAAC,OAAgB,EAAE,EAAE,CAAC,IAAA,uBAAY,EAAC,UAAU,EAAE,OAAO,CAAC,CAAgC,CAAC;AAClG,CAAC;AAZD,sCAYC","sourcesContent":["import { createAction } from './actions/index.js';\nimport { actionToControllerMap } from './constants.js';\nimport { makeActionType } from './actions/makeActionType.js';\nimport type { Action, ActionReducerParameters } from './types/index.js';\n\ntype InferActionFactory<Payload> = Payload extends undefined ? () => Action : (payload: Payload) => Action<Payload>;\n\nexport function createReducer<Payload = undefined, State = unknown>(\n  actionName: string,\n  reducer: (parameters: ActionReducerParameters<Payload, State>) => any\n): InferActionFactory<Payload> {\n  const actionType = makeActionType({\n    methodName: actionName,\n    uniqueSalt: new Date().valueOf().toString(),\n  });\n\n  actionToControllerMap.set(actionType, reducer);\n\n  return ((payload: unknown) => createAction(actionType, payload)) as InferActionFactory<Payload>;\n}\n"]}