{"version":3,"file":"mockMiddlewareFoTests.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/middleware/mockMiddlewareFoTests.ts"],"names":[],"mappings":";;;AAAA,uCAAyD;AAEzD,qDAAuE;AAEvE,uEAAiE;AAwCjE;;;KAGK;AACL,SAAgB,qBAAqB,CAOnC,eAAsC;AACtC;;;KAGK;AACL,cAA+B;IAE/B,MAAM,iBAAiB,GAAgC,EAAE,CAAC;IAC1D,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;IAEzC,MAAM,gBAAgB,GAAG,IAAA,wCAA6B,EAAC,eAAe,CAAC,CAAC;IAExE,MAAM,aAAa,GAAmC;QACpD,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE;YACnB,iBAAiB,CAAC,IAAI,CAAC;gBACrB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,OAAO,EAAE,MAAM,CAAC,OAAO;aACxB,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,IAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;gBAC/D,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;oBAC1D,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC1B,CAAC;YACH,CAAC;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,QAAQ,EAAE,GAAG,EAAE,CACb,CAAC;YACC,CAAC,cAAc,IAAI,gCAAgC,CAAC,EAAE,UAAU;SACjE,CAAU;KACd,CAAC;IAEF,MAAM,SAAS,GAAG,IAAI,wBAAa,EAAE,CAAC;IAEtC,MAAM,0BAA0B,GAAG,IAAA,8CAAoB,EAAQ;QAC7D,SAAS;KACV,CAAC,CAAC,aAAa,CAAC,CAAC;IAElB,MAAM,QAAQ,GAAG,KAAK,EAAE,MAAuB,EAAE,EAAE;QACjD,0BAA0B,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAE7C,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YAClC,MAAM,CAAC,kBAAkB,GAAG,OAAO,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,UAAU;QACV,QAAQ;QACR,SAAS;KACV,CAAC;AACJ,CAAC;AA5DD,sDA4DC","sourcesContent":["import { type Container, ContainerImpl } from 'cheap-di';\nimport type { Dispatch, MiddlewareAPI } from 'redux';\nimport { getStoreSliceUpdateActionType } from '../decorators/index.js';\nimport { Action, Constructor } from '../types/index.js';\nimport { controllerMiddleware } from './controllerMiddleware.js';\n\nexport type DispatchedAction<Payload = unknown> = {\n  type: string;\n  payload: Payload;\n};\n\nexport type MockedMiddlewareForTest<StoreSliceConstructor extends Constructor> = {\n  /**\n   * dispatched actions list to check actions order or content\n   * @example\n   * const { actions } = mockMiddlewareFoTests(...)\n   * const [firstAction] = actions\n   * expect(firstAction.type).toBe('my action type')\n   * */\n  dispatchedActions: DispatchedAction[];\n\n  /**\n   * store slice, to apply assertions based on changed data in the slice\n   * @example\n   * const { storeSlice } = mockMiddlewareFoTests(...)\n   * expect(storeSlice.myData).toBe(...)\n   * */\n  storeSlice: InstanceType<StoreSliceConstructor>;\n\n  /**\n   * mocked dispatching\n   * @example\n   * test('', () => {\n   *   const { dispatch } = mockMiddlewareFoTests(UsersSlice, 'users');\n   *   await dispatch(UserController.fetchUsers())\n   *   expect(...)\n   * }\n   * */\n  dispatch: (action: Action<unknown>) => Promise<void>;\n\n  /** container instance, it allows you to mock any dependency you wish per test */\n  container: Container;\n};\n\n/**\n * it helps you to mock the middleware for unit-tests\n *\n * */\nexport function mockMiddlewareFoTests<\n  StoreSliceName extends string,\n  StoreSliceConstructor extends Constructor,\n  State extends {\n    [sliceName in StoreSliceName]: InstanceType<StoreSliceConstructor>;\n  },\n>(\n  storeSliceClass: StoreSliceConstructor,\n  /**\n   * this name is used to put slice in `getState` function of redux middleware.\n   * It is needed in cases your controller call `this.getState().<storeSliceName>` to get something from the store\n   * */\n  storeSliceName?: StoreSliceName\n): MockedMiddlewareForTest<StoreSliceConstructor> {\n  const dispatchedActions: DispatchedAction<unknown>[] = [];\n  const storeSlice = new storeSliceClass();\n\n  const updateActionType = getStoreSliceUpdateActionType(storeSliceClass);\n\n  const middlewareAPI: MiddlewareAPI<Dispatch, State> = {\n    dispatch: (action) => {\n      dispatchedActions.push({\n        type: action.type,\n        payload: action.payload,\n      });\n\n      if (action.type === updateActionType && action.payload != null) {\n        for (const [key, value] of Object.entries(action.payload)) {\n          storeSlice[key] = value;\n        }\n      }\n\n      return action;\n    },\n    getState: () =>\n      ({\n        [storeSliceName ?? 'store slice name is not passed']: storeSlice,\n      }) as State,\n  };\n\n  const container = new ContainerImpl();\n\n  const mockedControllerMiddleware = controllerMiddleware<State>({\n    container,\n  })(middlewareAPI);\n\n  const dispatch = async (action: Action<unknown>) => {\n    mockedControllerMiddleware(() => {})(action);\n\n    await new Promise<void>((resolve) => {\n      action.executionCompleted = resolve;\n    });\n  };\n\n  return {\n    dispatchedActions,\n    storeSlice,\n    dispatch,\n    container,\n  };\n}\n"]}