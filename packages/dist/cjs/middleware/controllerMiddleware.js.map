{"version":3,"file":"controllerMiddleware.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/middleware/controllerMiddleware.ts"],"names":[],"mappings":";;;AAEA,4DAAsD;AACtD,kDAAwD;AACxD,8EAAwE;AACxE,gDAA0D;AAC1D,iEAA2D;AAC3D,mDAA6C;AAM7C,SAAS,oBAAoB,CAC3B,UAAuC,EAAE;IAEzC,OAAO,CAAC,aAAa,EAAE,EAAE;QACvB,IAAI,OAAO,EAAE,SAAS,EAAE,CAAC;YACvB,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,UAAU,EAAE,CAAC;gBAC5C,OAAO,CAAC,SAAS,EAAE,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,0BAAU,CAAC,CAAC;YACrE,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,0BAAU,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QAED,OAAO,CAAC,IAAI,EAAE,EAAE;YACd,OAAO,KAAK,EAAE,MAAM,EAAE,EAAE;gBACtB,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEb,uEAAuE;gBACvE,IAAI,CAAC,IAAA,mBAAQ,EAAC,MAAM,CAAC,EAAE,CAAC;oBACtB,OAAO;gBACT,CAAC;gBAED,MAAM,YAAY,CAAC;oBACjB,GAAG,OAAO;oBACV,aAAa;oBACb,MAAM;iBACP,CAAC,CAAC;YACL,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AA8BQ,oDAAoB;AA5B7B,KAAK,UAAU,YAAY,CACzB,MAGC;IAED,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAEpD,MAAM,aAAa,GAAG,oCAAqB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7D,IAAI,aAAa,EAAE,CAAC;QAClB,MAAM,IAAA,wCAAiB,EAAC;YACtB,aAAa;YACb,SAAS;YACT,aAAa;YACb,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAED,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;QAC3B,kCAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAClC,OAAO;IACT,CAAC;IAED,MAAM,IAAA,4CAAmB,EAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IACjD,kCAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import { type Container } from 'cheap-di';\nimport type { Dispatch, Middleware as ReduxMiddleware, MiddlewareAPI } from 'redux';\nimport { actionPromises } from '../actionPromises.js';\nimport { actionToControllerMap } from '../constants.js';\nimport { dispatchNextActions } from '../actions/dispatchNextActions.js';\nimport { type Action, isAction } from '../types/index.js';\nimport { callActionReducer } from './callActionReducer.js';\nimport { Middleware } from './Middleware.js';\n\ntype ControllerMiddlewareOptions = {\n  container?: Container | (() => Container);\n};\n\nfunction controllerMiddleware<State, _DispatchExt = {}>(\n  options: ControllerMiddlewareOptions = {}\n): ReduxMiddleware<_DispatchExt, State, Dispatch> {\n  return (middlewareAPI) => {\n    if (options?.container) {\n      if (typeof options.container === 'function') {\n        options.container().registerInstance(middlewareAPI).as(Middleware);\n      } else {\n        options.container.registerInstance(middlewareAPI).as(Middleware);\n      }\n    }\n\n    return (next) => {\n      return async (action) => {\n        next(action);\n\n        // we process only actions created with the redux-controller-middleware\n        if (!isAction(action)) {\n          return;\n        }\n\n        await handleAction({\n          ...options,\n          middlewareAPI,\n          action,\n        });\n      };\n    };\n  };\n}\n\nasync function handleAction<State>(\n  params: ControllerMiddlewareOptions & {\n    middlewareAPI: MiddlewareAPI<Dispatch, State>;\n    action: Action<unknown>;\n  }\n) {\n  const { container, middlewareAPI, action } = params;\n\n  const actionReducer = actionToControllerMap.get(action.type);\n  if (actionReducer) {\n    await callActionReducer({\n      middlewareAPI,\n      container,\n      actionReducer,\n      action,\n    });\n  }\n\n  if (action.stopPropagation) {\n    actionPromises.resolveAll(action);\n    return;\n  }\n\n  await dispatchNextActions(middlewareAPI, action);\n  actionPromises.resolveAll(action);\n}\n\nexport type { ControllerMiddlewareOptions };\nexport { controllerMiddleware };\n"]}