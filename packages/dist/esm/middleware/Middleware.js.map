{"version":3,"file":"Middleware.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/middleware/Middleware.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAO,UAAU;IACrB;QACE,MAAM,IAAI,KAAK,CACb,wHAAwH,CACzH,CAAC;IACJ,CAAC;IAED,QAAQ,GAA8B,GAAG,EAAE;QACzC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF,QAAQ;QACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF","sourcesContent":["import type { Dispatch, MiddlewareAPI } from 'redux';\nimport type { Action } from '../types/Action.js';\n\n/**\n * this class is needed to be able to resolve redux middleware via DI,\n * class is used as a token for such resolving\n */\nexport class Middleware<State = any> implements MiddlewareAPI<Dispatch<Action<unknown>>, State> {\n  constructor() {\n    throw new Error(\n      'This class is just token for resolving Redux middleware via Dependency Injection. You should not to create it directly'\n    );\n  }\n\n  dispatch: Dispatch<Action<unknown>> = () => {\n    throw new Error('Not implemented');\n  };\n\n  getState(): State {\n    throw new Error('Not implemented');\n  }\n}\n"]}