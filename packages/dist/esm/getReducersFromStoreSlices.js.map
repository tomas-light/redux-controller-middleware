{"version":3,"file":"getReducersFromStoreSlices.js","sourceRoot":"","sources":["../../redux-controller-middleware/src/getReducersFromStoreSlices.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAG9D;;;;;;;;;;;;;;;;;;;;;;KAsBK;AACL,MAAM,UAAU,0BAA0B,CACxC,WAAwB;IAExB,OAAO,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,EAAE;QAChF,IAAI,qBAAqB,CAAC,UAAU,CAAC,EAAE,CAAC;YACtC,QAAQ,CAAC,WAAgC,CAAC,GAAG,UAAU,CAAC,OAEvD,CAAC;QACJ,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC,EAAE,EAAqC,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { Reducer } from 'redux';\nimport { isDecoratedStoreSlice } from './decorators/index.js';\nimport { Constructor } from './types/index.js';\n\n/**\n * @example\n * \\@storeSlice\n * class StoreSlice1 {\n *   isLoading = true;\n * }\n * \\@storeSlice\n * class StoreSlice2 {\n *   open = false;\n * }\n * \\@storeSlice\n * class StoreSlice3 {\n *   counter = 0;\n * }\n * const reducers = getReducersFromStoreSlices({\n *   slice1: StoreSlice1,\n *   slice2: StoreSlice2,\n *   slice3: StoreSlice3,\n * });\n *\n * import { combineReducers } from 'redux';\n * const rootReducer = combineReducers(reducers);\n * */\nexport function getReducersFromStoreSlices<StoreSlices extends Record<string, Constructor>>(\n  storeSlices: StoreSlices\n): ReducersFromStores<StoreSlices> {\n  return Object.entries(storeSlices).reduce((reducers, [reducerName, storeSlice]) => {\n    if (isDecoratedStoreSlice(storeSlice)) {\n      reducers[reducerName as keyof StoreSlices] = storeSlice.reducer as ReducerFromStore<\n        StoreSlices[keyof StoreSlices]\n      >;\n    }\n\n    return reducers;\n  }, {} as ReducersFromStores<StoreSlices>);\n}\n\nexport type ReducerFromStore<StoreSlice> = StoreSlice extends Constructor\n  ? Reducer<InstanceType<StoreSlice>>\n  : Reducer<StoreSlice>;\n\nexport type ReducersFromStores<StoreSlices extends Record<string, Constructor>> = {\n  [sliceName in keyof StoreSlices]: ReducerFromStore<StoreSlices[sliceName]>;\n};\n"]}