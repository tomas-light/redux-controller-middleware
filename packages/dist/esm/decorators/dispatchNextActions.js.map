{"version":3,"file":"dispatchNextActions.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/decorators/dispatchNextActions.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAU,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAErD,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,aAA4B,EAAE,MAAuB;IAC7F,MAAM,WAAW,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IAEtD,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC;QAC1B,MAAM,mBAAmB,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;QAChD,IAAI,UAAkC,CAAC;QAEvC,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE,CAAC;YAC9C,IAAI,CAAC;gBACH,6BAA6B;gBAC7B,UAAU,GAAG,MAAM,mBAAmB,EAAE,CAAC;YAC3C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,KAAK,CAAC,CAAC;gBAC1E,iEAAiE;gBACjE,uCAAuC;gBACvC,MAAM;YACR,CAAC;QACH,CAAC;aAAM,CAAC;YACN,UAAU,GAAG,mBAAmB,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC1B,yDAAyD;YACzD,SAAS;QACX,CAAC;QAED,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YACjC,UAAqB,CAAC,kBAAkB,GAAG,OAAO,CAAC;YACpD,aAAa,CAAC,QAAQ,CAAC,UAAoB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,eAAe,EAAE,CAAC;YAC/B,MAAM;QACR,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { MiddlewareAPI } from 'redux';\nimport { AppAction } from '../actions/index.js';\nimport { Action, isAction } from '../types/index.js';\n\nexport async function dispatchNextActions(middlewareAPI: MiddlewareAPI, action: Action<unknown>) {\n  const nextActions = [...AppAction.getActions(action)];\n\n  while (nextActions.length) {\n    const nextActionOrFactory = nextActions.shift();\n    let nextAction: Action<unknown> | void;\n\n    if (typeof nextActionOrFactory === 'function') {\n      try {\n        // callback or action factory\n        nextAction = await nextActionOrFactory();\n      } catch (error) {\n        console.error('Unhandled exception in callback or action factory', error);\n        // if there is something went wrong, we cannot proceed as normal,\n        // because some user flow may be broken\n        break;\n      }\n    } else {\n      nextAction = nextActionOrFactory;\n    }\n\n    if (!isAction(nextAction)) {\n      // if it was just callback, no need additional processing\n      continue;\n    }\n\n    await new Promise<void>((resolve) => {\n      (nextAction as Action).executionCompleted = resolve;\n      middlewareAPI.dispatch(nextAction as Action);\n    });\n\n    if (nextAction.stopPropagation) {\n      break;\n    }\n  }\n}\n"]}