{"version":3,"file":"storeSlice.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/decorators/storeSlice.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAAE,MAAM,+BAA+B,CAAC;AAwBxE,MAAM,CAAC,MAAM,UAAU,GAAwB,CAAC,CAC9C,WAAkC,EAClC,EAAE;IACF,MAAM,kBAAkB,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAEjG,MAAM,mBAAmB,GAAG,WAAqE,CAAC;IAElG,oCAAoC;IACpC,MAAM,qBAAqB,GAAG,GAAG,kBAAkB,eAAe,CAAC;IACnE,MAAM,aAAa,GAAG,IAAI,WAAW,EAAE,CAAC;IAExC,mBAAmB,CAAC,MAAM,GAAG,qBAAqB,CAAC;IACnD,mBAAmB,CAAC,OAAO,GAAG,uBAAuB,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;IAE5F,OAAO,mBAAmB,CAAC;AAC7B,CAAC,CAAwB,CAAC;AAE1B,MAAM,UAAU,qBAAqB,CAGnC,UAAiC;IACjC,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,CACL,CAAC,QAA+E,CAAC,IAAI,UAAU;QAC/F,CAAC,SAAgF,CAAC,IAAI,UAAU,CACjG,CAAC;AACJ,CAAC","sourcesContent":["import { Reducer } from 'redux';\nimport { createStoreSliceReducer } from '../createStoreSliceReducer.js';\nimport { Action, Constructor } from '../types/index.js';\n\nexport type DecoratedStoreSlice<\n  StoreSlice,\n  StoreSliceConstructor extends Constructor<StoreSlice> = Constructor<StoreSlice>,\n> = StoreSliceConstructor & {\n  update: string;\n  reducer: Reducer<StoreSlice, Action<Partial<StoreSlice>>>;\n};\n\nexport interface StoreSliceDecorator {\n  // stage 3 decorator\n  <StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n    constructor: StoreSliceConstructor,\n    context: ClassDecoratorContext\n  ): StoreSliceConstructor;\n\n  // stage 2 decorator\n  <StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n    constructor: StoreSliceConstructor\n  ): StoreSliceConstructor;\n}\n\nexport const storeSlice: StoreSliceDecorator = (<StoreSlice, StoreSliceConstructor extends Constructor<StoreSlice>>(\n  constructor: StoreSliceConstructor\n) => {\n  const sanitizedClassName = constructor.name.replaceAll('StoreSlice', '').replaceAll('Store', '');\n\n  const decoratedStoreSlice = constructor as DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>;\n\n  // add action type for store updates\n  const updateStoreActionType = `${sanitizedClassName}_update_store`;\n  const initialValues = new constructor();\n\n  decoratedStoreSlice.update = updateStoreActionType;\n  decoratedStoreSlice.reducer = createStoreSliceReducer(initialValues, updateStoreActionType);\n\n  return decoratedStoreSlice;\n}) as StoreSliceDecorator;\n\nexport function isDecoratedStoreSlice<\n  StoreSlice,\n  StoreSliceConstructor extends Constructor<StoreSlice> = Constructor<StoreSlice>,\n>(storeSlice: StoreSliceConstructor): storeSlice is DecoratedStoreSlice<StoreSlice, StoreSliceConstructor> {\n  if (!storeSlice) {\n    return false;\n  }\n  if (typeof storeSlice !== 'function') {\n    return false;\n  }\n\n  return (\n    ('update' satisfies keyof DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>) in storeSlice &&\n    ('reducer' satisfies keyof DecoratedStoreSlice<StoreSlice, StoreSliceConstructor>) in storeSlice\n  );\n}\n"]}