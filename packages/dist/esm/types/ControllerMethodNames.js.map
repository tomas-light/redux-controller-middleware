{"version":3,"file":"ControllerMethodNames.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/types/ControllerMethodNames.ts"],"names":[],"mappings":"","sourcesContent":["import type { Action } from './Action.js';\nimport type { ControllerConstructor, InferConstructorResult } from './ControllerConstructor.js';\nimport type { IsString } from './IsString.js';\n\nexport type ControllerMethodNames<\n  TConstructor extends ControllerConstructor,\n  TController = InferConstructorResult<TConstructor>,\n  // check if values are action handler methods\n  Step1 extends Record<string, any> = {\n    [methodName in IsString<keyof TController>]: TController[methodName] extends (action?: Action<any>) => any\n      ? true\n      : never;\n  },\n  // filter never values\n  Step2 extends Record<string, any> = {\n    [methodName in keyof Step1 as Step1[methodName] extends never ? never : methodName]: Step1[methodName];\n  },\n> = IsString<keyof Step2>;\n"]}