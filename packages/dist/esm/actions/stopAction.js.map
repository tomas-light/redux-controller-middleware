{"version":3,"file":"stopAction.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/actions/stopAction.ts"],"names":[],"mappings":"AAGA;;;;;;;;;;;;;;;;;;;;;;;;KAwBK;AACL,MAAM,UAAU,UAAU,CAAU,SAA0B;IAC3D,SAAwC,CAAC,eAAe,GAAG,IAAI,CAAC;AACnE,CAAC","sourcesContent":["import type { Action } from '../types/index.js';\nimport type { Writable } from '../types/Writable.js';\n\n/**\n * If the action has next actions in chain, this method stops them from dispatching\n * @example\n * dispatch(\n *   chainActions(\n *     createUser(newUser),\n *     inviteUserSomewhere(newUser),\n *   )\n * )\n *\n * const createUser = createReducer<{ user: User }>('createUser', async ({ action, container, dispatch }) => {\n *   const userApi = container?.resolve(UserApi);\n *   const response = await userApi?.create(action.payload.user);\n *   if (!response.ok) {\n *     stopAction(action); // we can't invite not created user, so we may skip all next actions in the chain\n *     return;\n *   }\n *\n *   dispatch(\n *     updateStoreSlice(UsersSlice)({\n *       usersList: usersList.concat(response.data),\n *     })\n *   );\n * });\n * */\nexport function stopAction<Payload>(appAction: Action<Payload>): void {\n  (appAction as Writable<typeof appAction>).stopPropagation = true;\n}\n"]}