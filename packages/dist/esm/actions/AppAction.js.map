{"version":3,"file":"AppAction.js","sourceRoot":"","sources":["../../../redux-controller-middleware/src/actions/AppAction.ts"],"names":[],"mappings":"AAIA,MAAM,OAAO,SAAS;IACpB,IAAI,CAAM;IACV,OAAO,CAAU;IAER,OAAO,CAAsC;IAEtD,eAAe,CAAU;IACzB,SAAS,CAAa;IAKtB,YAAY,IAAY,EAAE,OAAiB;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAkB,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,cAAc,CAAU,SAA+C,EAAE,GAAG,OAA0B;QAC3G,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;QACnC,OAAO,SAA4B,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,UAAU,CAAU,SAA+C;QACxE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YACtC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,OAAO,SAAS,CAAC,OAAO,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAoB,CAAC;QAC/D,OAAO,WAAW,CAAC,aAAa,CAAC;QACjC,OAAO,WAAW,CAAC;IACrB,CAAC;CACF","sourcesContent":["import type { Container } from 'cheap-di';\nimport type { Action, ActionFactory, ActionMaybeWithContainer } from '../types/index.js';\nimport type { Writable } from '../types/Writable.js';\n\nexport class AppAction<Payload = undefined> implements ActionMaybeWithContainer<Payload> {\n  type: any;\n  payload: Payload;\n\n  readonly actions: (ActionFactory | Action<unknown>)[];\n\n  stopPropagation: boolean;\n  container?: Container;\n\n  // implementation of UnknownAction\n  [extraProps: string]: unknown;\n\n  constructor(type: string, payload?: Payload) {\n    this.type = type;\n    this.payload = payload as Payload;\n    this.actions = [];\n    this.stopPropagation = false;\n  }\n\n  static addNextActions<Payload>(appAction: Action<Payload> | AppAction<Payload>, ...actions: Action['actions']) {\n    appAction.actions.push(...actions);\n    return appAction as Action<Payload>;\n  }\n\n  static getActions<Payload>(appAction: Action<Payload> | AppAction<Payload>): Action['actions'] {\n    if (!Array.isArray(appAction.actions)) {\n      return [];\n    }\n\n    return appAction.actions;\n  }\n\n  toPlainObject(): Action<Payload> {\n    const plainObject = Object.assign({}, this) as Action<Payload>;\n    delete plainObject.toPlainObject;\n    return plainObject;\n  }\n}\n"]}